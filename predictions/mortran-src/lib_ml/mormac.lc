 mortran 2.0 macros for .lc to FORTRAN (M.Levitt May 1986)
0123456789abcdefghijklmnopqrstuvwxyz  .(),=+-*/  {};:'!    %#@^&?
'.@.#.nxptrpcs% '.#.'.= '.#.'.@.m g
%'%''#''=*''#'''='@mc'
%':#:'='%'':#1:''=''@lg'':#1:'
%';make_label(:#:)'='%'':#1:''=''@lg'''
%';:#:'='!;!:#1:?'
%'}'=';@mu'
%'@@u'='@lc11continue;@lc21continue;@lu1@lu1'
%'@@z'='@lc11continue;@lu1@lu1'
%'@@y'=';'
%'@@x'='goto @lc01;@lc02continue;@lu0'
%'@@w'='@lc01continue;@lc02continue;@lu0'
%'@#@1@@a'='@#1@ls0@lc01@lu0'
%'@#@1?'='@#1continue;'
%'@#@1?format('='@#1format('
%'@#@1?continue;'='@#1continue;'
%';{#=#,#;'=';@msw@lg@ls0do @lc01 #1=#2,#3;'
%';do #{'=';@msw@lg@ls0do @lc01 #1;'
%';repeat{'=';@msx@lg@ls0@lc01continue;'
%';until(#){'=';@msx@lg@ls0@lc01if(#1)goto @lc02;'
%';while(#){'=';@msx@lg@ls0@lc01if(.not.(#1))
goto @lc02;'
%';for(#;#;#){'=';@msx@lg@ls0#1;goto @lc03;
@lc01continue;#3;@lc03if(.not.(#2))goto @lc02;'
%';for(#;#;#);'=';@msx@lg@ls0#1;
@lc01if(.not.(#2))goto @lc02;#3; }'
%'{'=';@msy'
%';output#;'=';@lg@ls1write(6,@lc10)#1;@lc10format@lu1'
%';if(#)output#;'=';@lg@ls1if(#1)write(6,@lc10)#2;@lc10format@lu1'
%';input #;'=';@lg@ls1read(5,@lc10)#1;@lc10format@lu1'
%';if(#)input #;'=';@lg@ls1if(#1)read(5,@lc10)#2;@lc10format@lu1'
%';/#/=#;'=';#1=#2;'
%';/#,#/=#;'=';#1=#3;/#2/=#1;'
%';unless(#){'=';@msz@lg@ls1@lg@ls1if(#1)goto @lc11;'
%';if(#){'=';@msz@lg@ls1@lg@ls1if(.not.(#1))goto @lc11;'
%';break;'=';goto @lc02;'
%';next;'=';goto @lc01;'
%';continue;'=';goto @lc01;'
%';if(#)break;'=';if(#1)goto @lc02;'
%';if(#)next;'=';if(#1)goto @lc01;'
%'}else{'='@mru@lg@ls1;goto @lc11;@lc21continue;@lu2'
%'};else{'='@mru@lg@ls1;goto @lc11;@lc21continue;@lu2'
%'}elseif(#){'='@mru;goto @lc21;
@lc11if(.not.(#1))@lu1@lg@ls1goto @lc11;'
%'};elseif(#){'='@mru;goto @lc21;
@lc11if(.not.(#1))@lu1@lg@ls1goto @lc11;'
%'.not.(!(#))'='(#1)'
%'.not.(~(#))'='(#1)'
%'.not.((#))'='.not.(#1)'
%'.not.(#==#)'='#1.ne.#2'
%'.not.(#~=#)'='#1.eq.#2'
%'.not.(#<#)'='#1.ge.#2'
%'.not.(#<=#)'='#1.gt.#2'
%'.not.(#>#)'='#1.le.#2'
%'.not.(#>=#)'='#1.lt.#2'
%'.not.(#&&#)'='.not.(#1).or..not.(#2)'
%'.not.(#||#)'='(.not.(#1)).and.(.not.(#2))'
%';int '=';integer '
%';short '=';integer * 2 '
%';float '=';real '
%'=='='.eq.'
%'~'='.not.'
%'~='='.ne.'
%'>'='.gt.'
%'<'='.lt.'
%'>='='.ge.'
%'<='='.le.'
%'=='='.eq.'
%'&&'='.and.'
%'||'='.or.'
%';#+=#;'=';#1=#1+#2;'
%';#-=#;'=';#1=#1-#2;'
%';#*=#;'=';#1=#1*#2;'
%';#/=#;'=';#1=#1/#2;'
%';#++;'=';#1=#1+1;'
%';++#;'=';#1=#1+1;'
%';#--;'=';#1=#1-1;'
%';--#;'=';#1=#1-1;'
%'generate'='@cg'
%'nogenerate'='@cn'
%'endgenerate'='@ce'
%';execute:#:;'=';:#1:@@execute;'
%'@#@1?@@execute;'=';assign @lg@ls0@lc00 to i@#1;go to @#1@@a@@a@@a;
                  @lc00continue %''@@@@p@#1''=*''@lc00,''@lu0;;'
%'@#@1?procedure{'='@msv@#1@ls0@lc03continue %''@@@@p@#1''=*''@lc03'';'
%'@@v'='@lc04go to i@lc00,(@@p@lc00);@lu0'
%q1
! this macro is used for debugging
!  debug:(variable name|format)
%';debug:(#|#);'=';output #1;
('' *** debug #1 = '',
#2);'
%';debugl:(#|#);'=';if ( debugl ) { output #1;
('' *** debug #1 = '',
#2)};'
%'ins:(#)'=';#1:;'
! this macro checks if variables exceed the program limits
!  check_limit:(variable to be checked,maximum value)
%';check_limit:(#,#);'=';if(#1 > #2) {
    output #1 ; ('' *** size error. #1 = '',i8,'' is too big.'',
    '' increase #2 limit'')
    stop
    };'
!  check_limit:(variable to be checked,maximum macro value name:)
%';check_limit:(#,#:);'=';if(#1 > #2:) {
    output #1 ; ('' *** size error. #1 = '',i8,'' is too big.'',
    '' increase #2'','': macro'')
    stop
    };'
!
%'read(*);'=' valueq(50), charq(80),
  ibegq(50), iendq(50), itypq(50), idecq(50),
  valuec(50), valuac(500), valuaq(500), itypaq(500),
  delimc(50)
  integer ibegq, iendq, itypq, idecq, itypaq, ntokq
  character * 1 charq, lcolq, hgtq, delimc
  character * 8 valuec, valuac, blankq
  real * 8 valueq, valuaq
  logical eqsq, lfirqt
  data lcolq/'':''/, blankq/''        ''/, hgtq/''>''/;'
!
%',readonly'=' ';
%'trim(#)'='!#1(1:itrim(#1)!)'
%'trim(#(#:#))'='!#1(1+#2-1:itrim(#1(#2:#3))+#2-1!)'
%'trim(#(#)(#:#))'='!#1(#2)(1+#3-1:itrim(#1(#2)(#3:#4))+#3-1!)'
%'itrim(#)'='!itrim!(#1)'
%u2
%%
! skip over the ibm encode and decode macros when using on the vax
%';encode(#,#,#)#;'=';call core(#1,#2);
 write(99,#3)#4;'
%';decode(#,#,#)#;'=';call core(#1,#2);
 read(99,#3)#4;'
%';double '=';real * 8 '
